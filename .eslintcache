[{"H:\\Web\\Full Stack Web Developement\\React\\Learning\\confusion\\src\\index.js":"1","H:\\Web\\Full Stack Web Developement\\React\\Learning\\confusion\\src\\reportWebVitals.js":"2","H:\\Web\\Full Stack Web Developement\\React\\Learning\\confusion\\src\\App.js":"3","H:\\Web\\Full Stack Web Developement\\React\\Learning\\confusion\\src\\components\\MainComponent.jsx":"4","H:\\Web\\Full Stack Web Developement\\React\\Learning\\confusion\\src\\redux\\configureStore.jsx":"5","H:\\Web\\Full Stack Web Developement\\React\\Learning\\confusion\\src\\components\\AboutComponent.jsx":"6","H:\\Web\\Full Stack Web Developement\\React\\Learning\\confusion\\src\\components\\DishdetailComponent.jsx":"7","H:\\Web\\Full Stack Web Developement\\React\\Learning\\confusion\\src\\components\\MenuComponent.jsx":"8","H:\\Web\\Full Stack Web Developement\\React\\Learning\\confusion\\src\\components\\HomeComponent.jsx":"9","H:\\Web\\Full Stack Web Developement\\React\\Learning\\confusion\\src\\components\\HeaderComponent.jsx":"10","H:\\Web\\Full Stack Web Developement\\React\\Learning\\confusion\\src\\components\\FooterComponent.jsx":"11","H:\\Web\\Full Stack Web Developement\\React\\Learning\\confusion\\src\\redux\\reducer.jsx":"12","H:\\Web\\Full Stack Web Developement\\React\\Learning\\confusion\\src\\components\\ContactComponent.jsx":"13","H:\\Web\\Full Stack Web Developement\\React\\Learning\\confusion\\src\\shared\\promotions.jsx":"14","H:\\Web\\Full Stack Web Developement\\React\\Learning\\confusion\\src\\shared\\comments.jsx":"15","H:\\Web\\Full Stack Web Developement\\React\\Learning\\confusion\\src\\shared\\leaders.jsx":"16","H:\\Web\\Full Stack Web Developement\\React\\Learning\\confusion\\src\\shared\\dishes.jsx":"17","H:\\Web\\Full Stack Web Developement\\React\\Learning\\confusion\\src\\redux\\dishes.jsx":"18","H:\\Web\\Full Stack Web Developement\\React\\Learning\\confusion\\src\\redux\\comments.jsx":"19","H:\\Web\\Full Stack Web Developement\\React\\Learning\\confusion\\src\\redux\\leaders.jsx":"20","H:\\Web\\Full Stack Web Developement\\React\\Learning\\confusion\\src\\redux\\promotions.jsx":"21","H:\\Web\\Full Stack Web Developement\\React\\Learning\\confusion\\src\\redux\\ActionTypes.jsx":"22","H:\\Web\\Full Stack Web Developement\\React\\Learning\\confusion\\src\\redux\\ActionCreators.jsx":"23","H:\\Web\\Full Stack Web Developement\\React\\Learning\\confusion\\src\\components\\LoadingComponent.jsx":"24","H:\\Web\\Full Stack Web Developement\\React\\Learning\\confusion\\src\\redux\\forms.jsx":"25"},{"size":638,"mtime":1616424769333,"results":"26","hashOfConfig":"27"},{"size":362,"mtime":499162500000,"results":"28","hashOfConfig":"27"},{"size":495,"mtime":1612084068199,"results":"29","hashOfConfig":"27"},{"size":3185,"mtime":1617653906308,"results":"30","hashOfConfig":"27"},{"size":1052,"mtime":1617653679296,"results":"31","hashOfConfig":"27"},{"size":4429,"mtime":1610699083569,"results":"32","hashOfConfig":"27"},{"size":8518,"mtime":1617652079132,"results":"33","hashOfConfig":"27"},{"size":2590,"mtime":1617915146719,"results":"34","hashOfConfig":"27"},{"size":1341,"mtime":1617653000171,"results":"35","hashOfConfig":"27"},{"size":5538,"mtime":1617647554571,"results":"36","hashOfConfig":"27"},{"size":2435,"mtime":1617647581434,"results":"37","hashOfConfig":"27"},{"size":407,"mtime":1612084114643,"results":"38","hashOfConfig":"27"},{"size":18741,"mtime":1617735395263,"results":"39","hashOfConfig":"27"},{"size":457,"mtime":1610649204388,"results":"40","hashOfConfig":"27"},{"size":4927,"mtime":1610649178849,"results":"41","hashOfConfig":"27"},{"size":2432,"mtime":1616572703902,"results":"42","hashOfConfig":"27"},{"size":1614,"mtime":1615912705402,"results":"43","hashOfConfig":"27"},{"size":787,"mtime":1617650569199,"results":"44","hashOfConfig":"27"},{"size":406,"mtime":1617646800096,"results":"45","hashOfConfig":"27"},{"size":164,"mtime":1617643549065,"results":"46","hashOfConfig":"27"},{"size":176,"mtime":1617643571715,"results":"47","hashOfConfig":"27"},{"size":178,"mtime":1617649356675,"results":"48","hashOfConfig":"27"},{"size":749,"mtime":1617652342843,"results":"49","hashOfConfig":"27"},{"size":231,"mtime":1617650732231,"results":"50","hashOfConfig":"27"},{"size":155,"mtime":1617653570851,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"8mn3ro",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"54"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"54"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"54"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"H:\\Web\\Full Stack Web Developement\\React\\Learning\\confusion\\src\\index.js",[],["108","109"],"H:\\Web\\Full Stack Web Developement\\React\\Learning\\confusion\\src\\reportWebVitals.js",[],"H:\\Web\\Full Stack Web Developement\\React\\Learning\\confusion\\src\\App.js",[],"H:\\Web\\Full Stack Web Developement\\React\\Learning\\confusion\\src\\components\\MainComponent.jsx",["110","111","112"],"import React, { Component } from 'react';\r\nimport Home from \"./HomeComponent\";\r\nimport About from \"./AboutComponent\";\r\nimport Menu from \"./MenuComponent\";\r\nimport Contact from \"./ContactComponent\";\r\nimport DishDetail from './DishdetailComponent';\r\nimport Header from './HeaderComponent';\r\nimport Footer from './FooterComponent';\r\nimport { Switch, Route, Redirect, withRouter } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { addComment, fetchDishes } from '../redux/ActionCreators';\r\nimport { actions } from 'react-redux-form';\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    dishes: state.dishes,\r\n    comments: state.comments,\r\n    promotions: state.promotions,\r\n    leaders: state.leaders\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  addComment: (dishId, rating, author, comment) => dispatch(addComment(dishId, rating, author, comment)),\r\n  fetchDishes: () => { dispatch(fetchDishes()) },\r\n  resetFeedbackForm: () => { dispatch(actions.reset('feedback'))}\r\n});\r\n\r\nclass Main extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.props.fetchDishes();\r\n  }\r\n\r\n  render() {\r\n\r\n    const HomePage = () => {\r\n      return (\r\n        <Home\r\n          dish={this.props.dishes.dishes.filter((dish) => dish.featured)[0]}\r\n          dishesLoading={this.props.dishes.isLoading}\r\n          dishesErrMess={this.props.dishes.errMess}\r\n          promotion={this.props.promotions.filter((promotion) => promotion.featured)[0]}\r\n          leader={this.props.leaders.filter((leader) => leader.featured)[0]}\r\n        />\r\n      );\r\n    }\r\n    const DishWithId = ({ match }) => {\r\n      return (\r\n        <DishDetail dish={this.props.dishes.dishes.filter((dish) => dish.id === parseInt(match.params.dishId, 10))[0]}\r\n          isLoading={this.props.dishes.isLoading}\r\n          errMess={this.props.dishes.errMess}\r\n          comments={this.props.comments.filter((comment) => comment.dishId === parseInt(match.params.dishId, 10))}\r\n          addComment={this.props.addComment} />\r\n      );\r\n    };\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <Switch>\r\n          <Route path=\"/home\" component={HomePage} />\r\n          <Route path=\"/aboutus\" component={() => <About leaders={this.props.leaders} />} />\r\n          <Route exact path=\"/menu\" component={() => <Menu dishes={this.props.dishes} />} />\r\n          <Route path='/menu/:dishId' component={DishWithId} />\r\n          <Route exact path=\"/contactus\" component={()=><Contact resetFeedbackForm={this.props.resetFeedbackForm}/> } />\r\n          <Redirect to=\"/home\" />\r\n        </Switch>\r\n        <Footer />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Main));\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import { DISHES } from '../shared/dishes';\r\n// import { COMMENTS } from '../shared/comments';\r\n// import { PROMOTIONS } from '../shared/promotions';\r\n// import { LEADERS } from '../shared/leaders';\r\n{/* <Menu dishes={this.state.dishes} onClick={(dishId) => this.onDishSelect(dishId)} /> */ }\r\n{/* <DishDetail dish={this.state.dishes.filter((dish) => dish.id === this.state.selectedDish)[0]} /> */ }","H:\\Web\\Full Stack Web Developement\\React\\Learning\\confusion\\src\\redux\\configureStore.jsx",[],"H:\\Web\\Full Stack Web Developement\\React\\Learning\\confusion\\src\\components\\AboutComponent.jsx",[],"H:\\Web\\Full Stack Web Developement\\React\\Learning\\confusion\\src\\components\\DishdetailComponent.jsx",["113","114","115"],"import React, { Component } from 'react';\r\nimport { Card, CardImg, CardText, CardBody, CardTitle, Breadcrumb, BreadcrumbItem, Button, Modal, ModalHeader, ModalBody, Label, Row, Col } from \"reactstrap\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Control, LocalForm, Errors } from 'react-redux-form';\r\nimport { Loading } from './LoadingComponent';\r\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\r\nconst minLength = (len) => (val) => val && (val.length >= len);\r\n\r\nclass CommentForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isModalOpen: false\r\n    }\r\n    this.toggleModal = this.toggleModal.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n  toggleModal() {\r\n    this.setState({\r\n      isModalOpen: !this.state.isModalOpen\r\n    });\r\n  }\r\n  handleSubmit(values) {\r\n    this.toggleModal();\r\n    this.props.addComment(this.props.dishId, values.rating, values.author, values.comment);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Button outline onClick={this.toggleModal}>\r\n          <span className=\"fa fa-pencil fa-lg\"></span> Submit Comment\r\n                </Button>\r\n        <Modal isOpen={this.state.isModalOpen} toggle={this.toggleModal}>\r\n          <ModalHeader toggle={this.toggleModal}>Submit Comment</ModalHeader>\r\n          <ModalBody>\r\n            <LocalForm onSubmit={(values) => this.handleSubmit(values)}>\r\n              <Col>\r\n                <Row className=\"form-group\">\r\n                  <Label htmlFor=\"rating\">Rating</Label>\r\n                  <Control.select model=\".rating\"\r\n                    name=\"rating\"\r\n                    className=\"form-control\">\r\n                    <option>1</option>\r\n                    <option>2</option>\r\n                    <option>3</option>\r\n                    <option>4</option>\r\n                    <option>5</option>\r\n                  </Control.select>\r\n                </Row>\r\n                <Row className=\"form-group\">\r\n                  <Label htmlFor=\"name\">Your Name</Label>\r\n                  <Control.text model=\".author\"\r\n                    className=\"form-control\"\r\n                    id=\"name\"\r\n                    name=\"name\"\r\n                    placeholder=\"Your Name\"\r\n                    validators={{\r\n                      minLength: minLength(3),\r\n                      maxLength: maxLength(15)\r\n                    }}\r\n                  />\r\n                  <Errors\r\n                    className=\"text-danger\"\r\n                    model=\".name\"\r\n                    show=\"touched\"\r\n                    messages={{\r\n                      minLength: \"Must be greater than 2 charachters\",\r\n                      maxLength: \"Must be 15 charachters or less\"\r\n                    }}\r\n                  />\r\n                </Row>\r\n                <Row className=\"form-group\">\r\n                  <Label htmlFor=\"message\">Comment</Label>\r\n                  <Control.textarea model=\".comment\"\r\n                    className=\"form-control\"\r\n                    type=\"textarea\"\r\n                    id=\"message\"\r\n                    name=\"message\"\r\n                    rows=\"6\" />\r\n                </Row>\r\n                <Row className=\"form-group\">\r\n                  <Button type=\"submit\" color=\"primary\">\r\n                    Submit\r\n                    </Button>\r\n                </Row>\r\n              </Col>\r\n            </LocalForm>\r\n          </ModalBody>\r\n        </Modal>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nfunction RenderDish({ dish }) {\r\n  return (\r\n    <Card>\r\n      <CardImg width=\"100%\" object src={dish.image} alt={dish.name} />\r\n      <CardBody>\r\n        <CardTitle heading>{dish.name}</CardTitle>\r\n        <CardText>{dish.description}</CardText>\r\n      </CardBody>\r\n    </Card>\r\n  );\r\n};\r\n\r\nfunction RenderComments({ comments, addComment, dishId }) {\r\n  if (comments != null) {\r\n    return (\r\n      <div>\r\n        <h4>Comments</h4>\r\n        <ul className=\"list-unstyled\">\r\n          {comments.map((comment) => {\r\n            return (\r\n              <li key={comment.id}>\r\n                <p>{comment.comment}</p>\r\n                <p>--{comment.author} , {new Intl.DateTimeFormat('en-US', { year: 'numeric', month: 'short', day: '2-digit' }).format(new Date(Date.parse(comment.date)))}</p>\r\n              </li>\r\n            );\r\n          })}\r\n        </ul>\r\n        <CommentForm dishId={dishId} addComment={addComment} />\r\n      </div>\r\n    );\r\n  }\r\n  else {\r\n    return (\r\n      <div></div>\r\n    );\r\n  }\r\n};\r\n\r\n\r\nconst DishDetail = (props) => {\r\n  if (props.isLoading) {\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <Loading />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  else if (props.errMess) {\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <h4>{props.errMess}</h4>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  else if (props.dish != null) {\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <Breadcrumb>\r\n            <BreadcrumbItem><Link to='/menu'>Menu</Link></BreadcrumbItem>\r\n            <BreadcrumbItem active>{props.dish.name}</BreadcrumbItem>\r\n          </Breadcrumb>\r\n          <div className=\"col-12\">\r\n            <h3>{props.dish.name}</h3>\r\n            <hr />\r\n          </div>\r\n        </div>\r\n        <div className=\"row\">\r\n          <div className=\"col-12 col-md-5 m-1\">\r\n            <RenderDish dish={props.dish} />\r\n          </div>\r\n          <div className=\"col-12 col-md-5 m-1\">\r\n            <RenderComments comments={props.comments}\r\n              addComment={props.addComment}\r\n              dishId={props.dish.id} />\r\n          </div>\r\n        </div><br />\r\n      </div>\r\n    );\r\n  }\r\n  else {\r\n    return (\r\n      <div></div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default DishDetail;\r\n\r\n\r\n\r\n// Before Changing to functional components\r\n\r\n// class DishDetail extends Component {\r\n//     constructor(props) {\r\n//         super(props);\r\n//         this.state = {};\r\n//     }\r\n\r\n//     renderDish(dish) {\r\n//         if (dish != null) {\r\n//             return (\r\n//                 <Card>\r\n//                     <CardImg width=\"100%\" object src={dish.image} alt={dish.name} />\r\n//                     <CardBody>\r\n//                         <CardTitle heading>{dish.name}</CardTitle>\r\n//                         <CardText>{dish.description}</CardText>\r\n//                     </CardBody>\r\n//                 </Card>\r\n//             );\r\n//         }\r\n//         else {\r\n//             return (\r\n//                 <div></div>\r\n//             );\r\n//         }\r\n//     };\r\n\r\n//     renderComments(dish) {\r\n//         if (dish != null && dish.comments != null) {\r\n//             return (\r\n//                 <div>\r\n//                     <h4>Comments</h4>\r\n//                     <ul className=\"list-unstyled\">\r\n//                         {\r\n//                             dish.comments.map((comm) => {\r\n//                                 return (\r\n//                                     <li>\r\n//                                         <div>\r\n//                                             {comm.comment}\r\n//                                         </div>\r\n//                                         <br />\r\n//                                         <div>\r\n//                                             --{comm.author} , {new Intl.DateTimeFormat('en-US', { year: 'numeric', month: 'short', day: '2-digit' }).format(new Date(Date.parse(comm.date)))}\r\n//                                         </div>\r\n//                                         <br />\r\n//                                     </li>\r\n//                                 );\r\n//                             })\r\n//                         }\r\n//                     </ul>\r\n//                 </div>\r\n//             );\r\n//         }\r\n//         else {\r\n//             return (\r\n//                 <div></div>\r\n//             );\r\n//         }\r\n//     };\r\n\r\n//     render() {\r\n//         return (\r\n//             <div className=\"container\">\r\n//                 <div className=\"row\">\r\n//                     <div className=\"col-12 col-md-5 m-1\">\r\n//                         {this.renderDish(this.props.dish)}\r\n//                     </div>\r\n//                     <div className=\"col-12 col-md-5 m-1\">\r\n//                         {this.renderComments(this.props.dish)}\r\n//                     </div>\r\n//                 </div>\r\n//             </div>\r\n//         );\r\n//     }\r\n// }\r\n\r\n// export default DishDetail;","H:\\Web\\Full Stack Web Developement\\React\\Learning\\confusion\\src\\components\\MenuComponent.jsx",[],"H:\\Web\\Full Stack Web Developement\\React\\Learning\\confusion\\src\\components\\HomeComponent.jsx",[],"H:\\Web\\Full Stack Web Developement\\React\\Learning\\confusion\\src\\components\\HeaderComponent.jsx",[],"H:\\Web\\Full Stack Web Developement\\React\\Learning\\confusion\\src\\components\\FooterComponent.jsx",[],"H:\\Web\\Full Stack Web Developement\\React\\Learning\\confusion\\src\\redux\\reducer.jsx",[],["116","117"],"H:\\Web\\Full Stack Web Developement\\React\\Learning\\confusion\\src\\components\\ContactComponent.jsx",["118","119","120","121","122","123","124","125","126"],"import React, { Component } from 'react';\r\nimport { Breadcrumb, BreadcrumbItem, Button, Label, Col, Row, } from \"reactstrap\";\r\nimport { Link } from 'react-router-dom';\r\nimport { Control, Form, Errors, actions } from 'react-redux-form';\r\n\r\nconst required = (val) => val && val.length;\r\nconst maxLength = (len) => (val) => !(val) || (val.length <= len);\r\nconst minLength = (len) => (val) => val && (val.length >= len);\r\nconst isNumber = (val) => !isNaN(Number(val));\r\nconst validEmail = (val) => /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(val);\r\n\r\n\r\nclass Contact extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    //State not needed after rect redux form\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleSubmit(values) {\r\n    console.log(\"Current State is: \" + JSON.stringify(values));\r\n    alert(\"Current State is: \" + JSON.stringify(values));\r\n    this.props.resetFeedbackForm();\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <Breadcrumb>\r\n            <BreadcrumbItem><Link to='/home'>Home</Link></BreadcrumbItem>\r\n            <BreadcrumbItem active>Contact Us</BreadcrumbItem>\r\n          </Breadcrumb>\r\n          <div className=\"col-12\">\r\n            <h3>Contact Us</h3>\r\n            <hr />\r\n          </div>\r\n        </div>\r\n        <div className=\"row row-content\">\r\n          <div className=\"col-12\">\r\n            <h3>Location Information</h3>\r\n          </div>\r\n          <div className=\"col-12 col-sm-4 offset-sm-1\">\r\n            <h5>Our Address</h5>\r\n            <address>\r\n              121, Clear Water Bay Road<br />\r\n                        Clear Water Bay, Kowloon<br />\r\n                        HONG KONG<br />\r\n              <i className=\"fa fa-phone\"></i>: +852 1234 5678<br />\r\n              <i className=\"fa fa-fax\"></i>: +852 8765 4321<br />\r\n              <i className=\"fa fa-envelope\"></i>: <a href=\"mailto:confusion@food.net\">confusion@food.net</a>\r\n            </address>\r\n          </div>\r\n          <div className=\"col-12 col-sm-6 offset-sm-1\">\r\n            <h5>Map of our Location</h5>\r\n          </div>\r\n          <div className=\"col-12 col-sm-11 offset-sm-1\">\r\n            <div className=\"btn-group\" role=\"group\">\r\n              <a role=\"button\" className=\"btn btn-primary\" href=\"tel:+85212345678\"><i className=\"fa fa-phone\"></i> Call</a>\r\n              <a role=\"button\" className=\"btn btn-info\" ><i className=\"fa fa-skype\"></i> Skype</a>\r\n              <a role=\"button\" className=\"btn btn-success\" href=\"mailto:confusion@food.net\"><i className=\"fa fa-envelope-o\"></i> Email</a>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"row row-content\">\r\n          <div className=\"col-12\">\r\n            <h3>Send us Your Feedback</h3>\r\n          </div>\r\n          <div className=\"col-12 col-md-9\">\r\n            <Form model=\"feedback\" onSubmit={(values) => this.handleSubmit(values)}>\r\n              <Row className=\"form-group\">\r\n                <Label htmlFor=\"firstname\" md={2}>First Name</Label>\r\n                <Col md={10}>\r\n                  <Control.text model=\".firstname\"\r\n                    className=\"form-control\"\r\n                    id=\"firstname\"\r\n                    name=\"firstname\"\r\n                    placeholder=\"First Name\"\r\n                    validators={{\r\n                      required,\r\n                      minLength: minLength(3),\r\n                      maxLength: maxLength(15)\r\n                    }}\r\n                  />\r\n                  <Errors\r\n                    className=\"text-danger\"\r\n                    model=\".firstname\"\r\n                    show=\"touched\"\r\n                    messages={{\r\n                      required: \"Required \",\r\n                      minLength: \"Must be greater than 2 charachters\",\r\n                      maxLength: \"Must be 15 charachters or less\"\r\n                    }}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              <Row className=\"form-group\">\r\n                <Label htmlFor=\"lastname\" md={2}>Last Name</Label>\r\n                <Col md={10}>\r\n                  <Control.text model=\".lastname\"\r\n                    className=\"form-control\"\r\n                    id=\"lastname\"\r\n                    name=\"lastname\"\r\n                    placeholder=\"Last Name\"\r\n                    validators={{\r\n                      required,\r\n                      minLength: minLength(3),\r\n                      maxLength: maxLength(15)\r\n                    }}\r\n                  />\r\n                  <Errors\r\n                    className=\"text-danger\"\r\n                    model=\".lastname\"\r\n                    show=\"touched\"\r\n                    messages={{\r\n                      required: \"Required \",\r\n                      minLength: \"Must be greater than 2 charachters\",\r\n                      maxLength: \"Must be 15 charachters or less\"\r\n                    }}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              <Row className=\"form-group\">\r\n                <Label htmlFor=\"telnum\" md={2}>Contact Tel.</Label>\r\n                <Col md={10}>\r\n                  <Control.text model=\".telnum\"\r\n                    className=\"form-control\"\r\n                    id=\"telnum\"\r\n                    name=\"telnum\"\r\n                    placeholder=\"Tel. Number\"\r\n                    validators={{\r\n                      required,\r\n                      minLength: minLength(3),\r\n                      maxLength: maxLength(15),\r\n                      isNumber\r\n                    }}\r\n                  />\r\n                  <Errors\r\n                    className=\"text-danger\"\r\n                    model=\".telnum\"\r\n                    show=\"touched\"\r\n                    messages={{\r\n                      required: \"Required \",\r\n                      minLength: \"Must be greater than 2 numbers\",\r\n                      maxLength: \"Must be 15 numbers or less\",\r\n                      isNumber: \"Must be a number\"\r\n                    }}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              <Row className=\"form-group\">\r\n                <Label htmlFor=\"email\" md={2}>Email</Label>\r\n                <Col md={10}>\r\n                  <Control.text model=\".email\"\r\n                    className=\"form-control\"\r\n                    id=\"email\"\r\n                    name=\"email\"\r\n                    placeholder=\"Email\"\r\n                    validators={{\r\n                      required,\r\n                      validEmail\r\n                    }}\r\n                  />\r\n                  <Errors\r\n                    className=\"text-danger\"\r\n                    model=\".email\"\r\n                    show=\"touched\"\r\n                    messages={{\r\n                      required: \"Required \",\r\n                      validEmail: \"Invalid Email Address\"\r\n                    }}\r\n                  />\r\n                </Col>\r\n              </Row>\r\n              <Row className=\"form-group\">\r\n                <Col md={{ size: 6, offset: 2 }}>\r\n                  <div className=\"form-check\" >\r\n                    <Label check>\r\n                      <Control.checkbox model=\".agree\"\r\n                        className=\"form-check-input\"\r\n                        name=\"agree\" />\r\n                      <strong>May we contact you?</strong>\r\n                    </Label>\r\n                  </div>\r\n                </Col>\r\n                <Col md={{ size: 3, offset: 1 }}>\r\n                  <Control.select model=\".contactType\"\r\n                    name=\"contactType\"\r\n                    className=\"form-control\">\r\n                    <option>Tel.</option>\r\n                    <option>Email</option>\r\n                  </Control.select>\r\n                </Col>\r\n              </Row>\r\n              <Row className=\"form-group\">\r\n                <Label htmlFor=\"message\" md={2}>Your Feedback</Label>\r\n                <Col md={10}>\r\n                  <Control.textarea model=\".message\"\r\n                    className=\"form-control\"\r\n                    type=\"textarea\"\r\n                    id=\"message\"\r\n                    name=\"message\"\r\n                    rows=\"12\" />\r\n                </Col>\r\n              </Row>\r\n              <Row className=\"form-group\">\r\n                <Col md={{ size: 10, offset: 2 }}>\r\n                  <Button type=\"submit\" color=\"primary\">\r\n                    Send Feedback\r\n                                    </Button>\r\n                </Col>\r\n              </Row>\r\n            </Form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n\r\n  }\r\n}\r\n\r\n\r\nexport default Contact;\r\n\r\n\r\n//Before React redux forms was used \r\n\r\n// import React, { Component } from 'react';\r\n// import { Breadcrumb, BreadcrumbItem, Button, Form, FormGroup, Label, Input, Col, FormFeedback } from \"reactstrap\";\r\n// import { Link } from 'react-router-dom';\r\n\r\n// class Contact extends Component {\r\n//     constructor(props) {\r\n//         super(props);\r\n//         this.state = {\r\n//             firstname: '',\r\n//             lastname: '',\r\n//             telnum: '',\r\n//             email: '',\r\n//             agree: false,\r\n//             contactType: 'Tel.',\r\n//             message: '',\r\n//             touched: {\r\n//                 firstname: false,\r\n//                 lastname: false,\r\n//                 telnum: false,\r\n//                 email: false,\r\n//             }\r\n//         };\r\n//         this.handleSubmit = this.handleSubmit.bind(this);\r\n//         this.handleInputChange = this.handleInputChange.bind(this);\r\n//     }\r\n\r\n//     handleBlur = (field) => (event) => {\r\n//         this.setState({\r\n//             touched: { ...this.state.touched, [field]: true }\r\n//         });\r\n//     }\r\n\r\n//     validate(firstname, lastname, telnum, email) {\r\n//         const errors = {\r\n//             firstname: '',\r\n//             lastname: '',\r\n//             telnum: '',\r\n//             email: ''\r\n//         };\r\n//         if (this.state.touched.firstname && firstname.length < 3)\r\n//             errors.firstname = 'First Name should be >= 3 characters';\r\n//         else if (this.state.touched.firstname && firstname.length > 10)\r\n//             errors.firstname = 'First Name should be <= 10 characters';\r\n\r\n//         if (this.state.touched.lastname && lastname.length < 3)\r\n//             errors.lastname = 'Last Name should be >= 3 characters';\r\n//         else if (this.state.touched.lastname && lastname.length > 10)\r\n//             errors.lastname = 'Last Name should be <= 10 characters';\r\n\r\n//         const reg = /^\\d+$/;\r\n//         if (this.state.touched.telnum && !reg.test(telnum))\r\n//             errors.telnum = 'Tel. Number should contain only numbers';\r\n\r\n//         if (this.state.touched.email && email.split('').filter(x => x === '@').length !== 1)\r\n//             errors.email = 'Email should contain a @';\r\n\r\n//         return errors;\r\n//     }\r\n\r\n//     handleInputChange(event) {\r\n//         const target = event.target;\r\n//         const value = (target.type === 'checkbox') ? target.checked : target.value;\r\n//         const name = target.name;\r\n//         this.setState({\r\n//             [name]: value\r\n//         })\r\n//     }\r\n\r\n//     handleSubmit(event) {\r\n//         console.log(\"Current State is: \" + JSON.stringify(this.state));\r\n//         alert(\"Current State is: \" + JSON.stringify(this.state));\r\n//         event.preventDefault();\r\n//     }\r\n\r\n//     render() {\r\n//         const errors = this.validate(this.state.firstname, this.state.lastname, this.state.telnum, this.state.email);\r\n\r\n//         return (\r\n//             <div className=\"container\">\r\n//                 <div className=\"row\">\r\n//                     <Breadcrumb>\r\n//                         <BreadcrumbItem><Link to='/home'>Home</Link></BreadcrumbItem>\r\n//                         <BreadcrumbItem active>Contact Us</BreadcrumbItem>\r\n//                     </Breadcrumb>\r\n//                     <div className=\"col-12\">\r\n//                         <h3>Contact Us</h3>\r\n//                         <hr />\r\n//                     </div>\r\n//                 </div>\r\n//                 <div className=\"row row-content\">\r\n//                     <div className=\"col-12\">\r\n//                         <h3>Location Information</h3>\r\n//                     </div>\r\n//                     <div className=\"col-12 col-sm-4 offset-sm-1\">\r\n//                         <h5>Our Address</h5>\r\n//                         <address>\r\n//                             121, Clear Water Bay Road<br />\r\n//                         Clear Water Bay, Kowloon<br />\r\n//                         HONG KONG<br />\r\n//                             <i className=\"fa fa-phone\"></i>: +852 1234 5678<br />\r\n//                             <i className=\"fa fa-fax\"></i>: +852 8765 4321<br />\r\n//                             <i className=\"fa fa-envelope\"></i>: <a href=\"mailto:confusion@food.net\">confusion@food.net</a>\r\n//                         </address>\r\n//                     </div>\r\n//                     <div className=\"col-12 col-sm-6 offset-sm-1\">\r\n//                         <h5>Map of our Location</h5>\r\n//                     </div>\r\n//                     <div className=\"col-12 col-sm-11 offset-sm-1\">\r\n//                         <div className=\"btn-group\" role=\"group\">\r\n//                             <a role=\"button\" className=\"btn btn-primary\" href=\"tel:+85212345678\"><i className=\"fa fa-phone\"></i> Call</a>\r\n//                             <a role=\"button\" className=\"btn btn-info\" ><i className=\"fa fa-skype\"></i> Skype</a>\r\n//                             <a role=\"button\" className=\"btn btn-success\" href=\"mailto:confusion@food.net\"><i className=\"fa fa-envelope-o\"></i> Email</a>\r\n//                         </div>\r\n//                     </div>\r\n//                 </div>\r\n//                 <div className=\"row row-content\">\r\n//                     <div className=\"col-12\">\r\n//                         <h3>Send us Your Feedback</h3>\r\n//                     </div>\r\n//                     <div className=\"col-12 col-md-9\">\r\n//                         <Form onSubmit={this.handleSubmit}>\r\n//                             <FormGroup row>\r\n//                                 <Label htmlFor=\"firstname\" md={2}>First Name</Label>\r\n//                                 <Col md={10}>\r\n//                                     <Input type=\"text\" id=\"firstname\" name=\"firstname\" placeholder=\"First Name\" value={this.state.firstname} onChange={this.handleInputChange} onBlur={this.handleBlur('firstname')} valid={errors.firstname === ''} invalid={errors.firstname !== ''} />\r\n//                                     <FormFeedback>{errors.firstname}</FormFeedback>\r\n//                                 </Col>\r\n//                             </FormGroup>\r\n//                             <FormGroup row>\r\n//                                 <Label htmlFor=\"lastname\" md={2}>Last Name</Label>\r\n//                                 <Col md={10}>\r\n//                                     <Input type=\"text\" id=\"lastname\" name=\"lastname\" placeholder=\"Last Name\" value={this.state.lastname} onChange={this.handleInputChange} onBlur={this.handleBlur('lastname')} valid={errors.lastname === ''} invalid={errors.lastname !== ''} />\r\n//                                     <FormFeedback>{errors.lastname}</FormFeedback>\r\n//                                 </Col>\r\n//                             </FormGroup>\r\n//                             <FormGroup row>\r\n//                                 <Label htmlFor=\"telnum\" md={2}>Contact Tel.</Label>\r\n//                                 <Col md={10}>\r\n//                                     <Input type=\"tel\" id=\"telnum\" name=\"telnum\" placeholder=\"Tel. Number\" value={this.state.telnum} onChange={this.handleInputChange} onBlur={this.handleBlur('telnum')} valid={errors.telnum === ''} invalid={errors.telnum !== ''} />\r\n//                                     <FormFeedback>{errors.telnum}</FormFeedback>\r\n//                                 </Col>\r\n//                             </FormGroup>\r\n//                             <FormGroup row>\r\n//                                 <Label htmlFor=\"email\" md={2}>Email</Label>\r\n//                                 <Col md={10}>\r\n//                                     <Input type=\"email\" id=\"email\" name=\"email\" placeholder=\"Email\" value={this.state.email} onChange={this.handleInputChange} onBlur={this.handleBlur('email')} valid={errors.email === ''} invalid={errors.email !== ''} />\r\n//                                     <FormFeedback>{errors.email}</FormFeedback>\r\n//                                 </Col>\r\n//                             </FormGroup>\r\n//                             <FormGroup row>\r\n//                                 <Col md={{ size: 6, offset: 2 }}>\r\n//                                     <FormGroup check>\r\n//                                         <Label check>\r\n//                                             <Input type=\"checkbox\" name=\"agree\" checked={this.state.agree} onChange={this.handleInputChange} />\r\n//                                             <strong>May we contact you?</strong>\r\n//                                         </Label>\r\n//                                     </FormGroup>\r\n//                                 </Col>\r\n//                                 <Col md={{ size: 3, offset: 1 }}>\r\n//                                     <Input type=\"select\" name=\"contactType\" value={this.state.contactType} onChange={this.handleInputChange} >\r\n//                                         <option>Tel.</option>\r\n//                                         <option>Email</option>\r\n//                                     </Input>\r\n//                                 </Col>\r\n//                             </FormGroup>\r\n//                             <FormGroup row>\r\n//                                 <Label htmlFor=\"message\" md={2}>Your Feedback</Label>\r\n//                                 <Col md={10}>\r\n//                                     <Input type=\"textarea\" id=\"message\" name=\"message\" rows=\"12\" value={this.state.message} onChange={this.handleInputChange} />\r\n//                                 </Col>\r\n//                             </FormGroup>\r\n//                             <FormGroup row >\r\n//                                 <Col md={{ size: 10, offset: 2 }}>\r\n//                                     <Button type=\"submit\" color=\"primary\">\r\n//                                         Send Feedback\r\n//                                     </Button>\r\n//                                 </Col>\r\n//                             </FormGroup>\r\n//                         </Form>\r\n//                     </div>\r\n//                 </div>\r\n//             </div>\r\n//         );\r\n//     }\r\n// }\r\n\r\n// export default Contact;","H:\\Web\\Full Stack Web Developement\\React\\Learning\\confusion\\src\\shared\\promotions.jsx",[],"H:\\Web\\Full Stack Web Developement\\React\\Learning\\confusion\\src\\shared\\comments.jsx",[],"H:\\Web\\Full Stack Web Developement\\React\\Learning\\confusion\\src\\shared\\leaders.jsx",[],["127","128"],"H:\\Web\\Full Stack Web Developement\\React\\Learning\\confusion\\src\\shared\\dishes.jsx",[],"H:\\Web\\Full Stack Web Developement\\React\\Learning\\confusion\\src\\redux\\dishes.jsx",[],"H:\\Web\\Full Stack Web Developement\\React\\Learning\\confusion\\src\\redux\\comments.jsx",[],"H:\\Web\\Full Stack Web Developement\\React\\Learning\\confusion\\src\\redux\\leaders.jsx",[],"H:\\Web\\Full Stack Web Developement\\React\\Learning\\confusion\\src\\redux\\promotions.jsx",[],"H:\\Web\\Full Stack Web Developement\\React\\Learning\\confusion\\src\\redux\\ActionTypes.jsx",[],"H:\\Web\\Full Stack Web Developement\\React\\Learning\\confusion\\src\\redux\\ActionCreators.jsx",[],"H:\\Web\\Full Stack Web Developement\\React\\Learning\\confusion\\src\\components\\LoadingComponent.jsx",[],"H:\\Web\\Full Stack Web Developement\\React\\Learning\\confusion\\src\\redux\\forms.jsx",[],{"ruleId":"129","replacedBy":"130"},{"ruleId":"131","replacedBy":"132"},{"ruleId":"133","severity":1,"message":"134","line":30,"column":3,"nodeType":"135","messageId":"136","endLine":32,"endColumn":4},{"ruleId":"137","severity":1,"message":"138","line":94,"column":1,"nodeType":"139","messageId":"140","endLine":94,"endColumn":93},{"ruleId":"137","severity":1,"message":"138","line":95,"column":1,"nodeType":"139","messageId":"140","endLine":95,"endColumn":106},{"ruleId":"141","severity":1,"message":"142","line":41,"column":19,"nodeType":"143","endLine":43,"endColumn":46},{"ruleId":"141","severity":1,"message":"144","line":53,"column":19,"nodeType":"143","endLine":62,"endColumn":21},{"ruleId":"141","severity":1,"message":"145","line":75,"column":19,"nodeType":"143","endLine":80,"endColumn":32},{"ruleId":"129","replacedBy":"146"},{"ruleId":"131","replacedBy":"147"},{"ruleId":"148","severity":1,"message":"149","line":4,"column":33,"nodeType":"150","messageId":"151","endLine":4,"endColumn":40},{"ruleId":"152","severity":1,"message":"153","line":61,"column":15,"nodeType":"143","endLine":61,"endColumn":58},{"ruleId":"141","severity":1,"message":"144","line":75,"column":19,"nodeType":"143","endLine":85,"endColumn":21},{"ruleId":"141","severity":1,"message":"144","line":101,"column":19,"nodeType":"143","endLine":111,"endColumn":21},{"ruleId":"141","severity":1,"message":"144","line":127,"column":19,"nodeType":"143","endLine":138,"endColumn":21},{"ruleId":"141","severity":1,"message":"144","line":155,"column":19,"nodeType":"143","endLine":164,"endColumn":21},{"ruleId":"141","severity":1,"message":"154","line":180,"column":23,"nodeType":"143","endLine":182,"endColumn":40},{"ruleId":"141","severity":1,"message":"142","line":188,"column":19,"nodeType":"143","endLine":190,"endColumn":46},{"ruleId":"141","severity":1,"message":"145","line":199,"column":19,"nodeType":"143","endLine":204,"endColumn":33},{"ruleId":"129","replacedBy":"155"},{"ruleId":"131","replacedBy":"156"},"no-native-reassign",["157"],"no-negated-in-lhs",["158"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","react/jsx-pascal-case","Imported JSX component select must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component text must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component textarea must be in PascalCase or SCREAMING_SNAKE_CASE",["157"],["158"],"no-unused-vars","'actions' is defined but never used.","Identifier","unusedVar","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","Imported JSX component checkbox must be in PascalCase or SCREAMING_SNAKE_CASE",["157"],["158"],"no-global-assign","no-unsafe-negation"]